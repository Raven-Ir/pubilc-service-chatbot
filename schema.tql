define

    public-service sub entity,
    plays hasInput:service,
    plays hasRule:service,
    plays hasCost:service,
    plays hasOutput:service,
    plays hasChannel:service,
    plays visitation:service,
    owns identifier @key,
    owns name,
    owns description;

    evidence sub entity,
    plays hasInput:in,
    plays input-citizen:in,
    owns identifier,
    owns name @key,
    owns description;

    output sub entity,
    plays hasOutput:out,
    plays output-citizen:out,
    owns identifier,
    owns name @key,
    owns description;

    cost sub entity,
    plays hasCost:cost,
    plays cost-citizen:cost,
    owns  identifier,
    owns amount,
    owns currency,
    owns description;

    channel sub entity,
    plays hasChannel:ch,
    owns identifier,
    owns name,
    owns description;
    
    rul sub entity,
    plays hasRule:rul,
    owns identifier,
    owns description;

    citizen sub entity,
    plays visitation:citizen,
    plays input-citizen:citizen,
    plays cost-citizen:citizen, 
    plays output-citizen:citizen,
    owns both-partner-aggreement,
    owns both-partners-present,
    owns serious-marrige-change,
    owns marriage-duration,
    owns partner-seperated-duration,
    owns special-situations,
    owns income,
    owns kids;

    identifier sub attribute,
    value string;

    name sub attribute,
    value string;

    description sub attribute,
    value string;

    amount sub attribute,
    value double;

    currency sub attribute,
    value string;

    kids sub attribute,
    value string,
    regex "^(yes|no)";
    
    marriage-duration sub attribute,
    value double;

    both-partner-aggreement sub attribute,
    value string,
    regex "^(yes|no)";

    both-partners-present sub attribute,
    value string,
    regex "^(yes|no)";

    serious-marrige-change sub attribute,
    value string,
    regex "^(yes|no)";

    partner-seperated-duration sub attribute,
    value double;

    special-situations sub attribute,
    value string,
    regex "^(yes|no)";

    income sub attribute,
    value double;

    hasCost sub relation,
    relates service,
    relates cost;

    hasOutput sub relation,
    relates service,
    relates out;
    
    hasChannel sub relation,
    relates ch,
    relates service;

    hasInput sub relation,
    relates service,
    relates in;

    hasRule sub relation,
    relates service,
    relates rul;

    hasChannel sub relation,
    relates service,
    relates ch;

    visitation sub relation,
    relates service,
    relates citizen;

    input-citizen sub relation,
    relates citizen,
    relates in;

    output-citizen sub relation,
    relates citizen,
    relates out;

    cost-citizen sub relation,
    relates citizen,
    relates cost;

    ##Rule for the cost of an Uncontested Divorce
    rule uncontested-divorce-cost:
    when {
        $serv isa public-service;
        $c isa citizen, has both-partner-aggreement "yes";
        $cost isa cost, has identifier "uncontested";
        (service:$serv, citizen:$c) isa visitation;
        (service:$serv, cost:$cost) isa hasCost;
    } then {
        (citizen:$c, cost:$cost) isa cost-citizen;
    };

    ##Rule for ONLINE UNCONTESTED divorce
    rule uncontested-divorce-online:
    when {
        $serv isa public-service;
        $c isa citizen, has both-partner-aggreement "yes";
        $out isa output, has identifier "gov.gr";
        (service:$serv, citizen:$c) isa visitation;
        (service:$serv, out:$out) isa hasOutput;
    } then {
        (citizen:$c, out:$out) isa output-citizen;
    };

    ##Rule for the EVIDENCE of Uncontested Divorce
    rule uncontested-divorce-evidence:
    when {
        $serv isa public-service;
        $in isa evidence, has identifier "uncontested";
        (service:$serv,citizen:$c) isa visitation;
        (service:$serv, in:$in) isa hasInput;
    } then {
        (citizen:$c, in:$in) isa input-citizen;
    };

   ##Rule for the COST of CONTESTED Divorce
   rule contested-divorce-cost:
    when {
        $serv isa public-service;
        $c isa citizen, has both-partner-aggreement "no";
        $cost isa cost, has identifier "contested";
        (service:$serv, citizen:$c) isa visitation;
        (service:$serv, cost:$cost) isa hasCost;
    } then {
        (citizen:$c, cost:$cost) isa cost-citizen;
    };

    ##Rule for the EVIDENCE of CONTESTED Divorce
    rule contested-divorce-evidence:
     when {
         $serv isa public-service;
         $in isa evidence, has identifier "contested";
         (service:$serv,citizen:$c) isa visitation;
         (service:$serv, in:$in) isa hasInput;
     } then {
         (citizen:$c, in:$in) isa input-citizen;
     };

    ##Rule if both partners agree on the custody.
    rule children-custody-aggreement:
      when {
         $serv isa public-service;
         $c isa citizen, has kids "yes";
         $in isa evidence, has identifier "custody-aggrement";
         (service:$serv,citizen:$c) isa visitation;
         (service:$serv, in:$in) isa hasInput;
      } then {
        (citizen:$c, in:$in) isa input-citizen;
      };
    
    ##Rule for INFORMATION of UNCONTESTED divorce
    rule uncontested-divorce-information:
     when {
         $serv isa public-service;
         $c isa citizen, has both-partner-aggreement "yes", has marriage-duration >= 6;
         $out isa output, has identifier "uncontested";
         (service:$serv,citizen:$c) isa visitation;
         (service:$serv, out:$out) isa hasOutput;
     } then {
        (citizen:$c, out:$out) isa output-citizen;
    };

    ##Rule for INFORMATION of CONTESTED divorce
    rule contested-divorce-information:
     when {
         $serv isa public-service;
         $c isa citizen, has both-partner-aggreement "no";
         $out isa output, has identifier "contested";
         (service:$serv,citizen:$c) isa visitation;
         (service:$serv, out:$out) isa hasOutput;
     } then {
         (citizen:$c, out:$out) isa output-citizen;
    };

    ##Rule for reason SPECIAL OCCASIONS divorce
    rule contested-divorce-special-occasions:
     when {
         $serv isa public-service;
         $c isa citizen, has special-situations "no";
         $out isa output, has identifier "contested";
         (service:$serv,citizen:$c) isa visitation;
         (service:$serv, out:$out) isa hasOutput;
     } then {
        (citizen:$c, out:$out) isa output-citizen;
    };

    ##Rule about partner dissapearence
    rule partner-dissapearence:
    when{
        $serv isa public-service;
        $c isa citizen, has both-partners-present "no";
        $out isa output, has identifier "contested";
        (service:$serv,citizen:$c) isa visitation;
        (service:$serv, out:$out) isa hasOutput;
    } then {
        (citizen:$c, out:$out) isa output-citizen;
    };

    ##Rule for LOW INCOME to be free of charge
    rule free-of-charge:
    when {
        $serv isa public-service;
        $c isa citizen, has income < 8000;
        $cost isa cost, has identifier "low-income";
        (service:$serv,citizen:$c) isa visitation;
        (service:$serv, cost:$cost) isa hasCost;
    } then {
        (citizen:$c, cost:$cost) isa cost-citizen;
    };

    ##Rule for EVIDENCE to be free of charge
    rule free-of-charge:
    when {
        $serv isa public-service;
        $c isa citizen, has income < 8000;
        $in isa evidence, has identifier "low-income";
        (service:$serv,citizen:$c) isa visitation;
        (service:$serv, in:$in) isa hasInput;
    } then {
        (citizen:$c, in:$in) isa input-citizen;
    };

    ##Rule about partners living in seperation for at least 2 years.
    rule partner-seperated:
    when {
        $serv isa public-service;
        $c isa citizen, has partner-seperated-duration > 23;
        $out isa output, has identifier "contested";
        (service:$serv,citizen:$c) isa visitation;
        (service:$serv, out:$out) isa hasOutput;
     } then {
        (citizen:$c, out:$out) isa output-citizen;
    };